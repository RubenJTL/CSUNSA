#include <iostream>
#include <stdlib.h>   //atoi
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <tuple>
#include <algorithm>
#include <iomanip>
#include <vector>
using namespace std;

typedef double dobles;
typedef double enteros;




void zeros(vector<enteros> &v,int tam_datos);
void run(int tam_datos, vector<dobles> &pesos,vector<enteros> &Yout,vector<enteros> deseado,vector<vector<enteros>> datos);
bool error(vector<enteros> Yout,vector<enteros> deseado);
double suma_de_PesosDatos(vector<dobles> pesos,vector<enteros> datos);
void obtener_Y(vector<dobles> &pesos,vector<enteros> datos,enteros &Yout,enteros deseado);
void cambio_de_pesos(vector<dobles> & pesos,vector<enteros> datos,enteros Yout, enteros deseado);
int function(double numero);
void mostrar_iniciales(vector<vector<enteros>> v,std::vector<enteros> deseado);
void mostrar_Y(vector<enteros> Y);
void mostrar_pesos(vector<double> pesos);

double alpha=0.5;



int main(){
int tam_datos=100;
vector<dobles> pesos;
vector<enteros> Yout;
//vector<enteros> deseado={0,0,0,1};
/*vector<vector<enteros>> datos={	{1,0,0},//A
								{1,0,1},	//B
								{1,1,0},//C
								{1,1,1}};
/*
vector<enteros> deseado={1,1,0,1};
/*vector<vector<enteros>> datos={	{1,1,1,1},//A
								{0,0,1,1},	//B
								{0,1,0,1},//C
								};

*/

vector<enteros> deseado={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

vector<vector<enteros>> datos={{0.2962962963,0.625,0.0975609756,0.0588235294},
{0.2222222222,0.4166666667,0.0975609756,0.0588235294},
{0.1481481481,0.5,0.0731707317,0.0588235294},
{0.1111111111,0.4583333333,0.1219512195,0.0588235294},
{0.2592592593,0.6666666667,0.0975609756,0.1176470588},
{0.4074074074,0.7916666667,0.1707317073,0.1764705882},
{0.1111111111,0.5833333333,0.0975609756,0.1176470588},
{0.2592592593,0.5833333333,0.1219512195,0.0588235294},
{0.037037037,0.375,0.0975609756,0.0588235294},
{0.2222222222,0.4583333333,0.1219512195,0},
{0.4074074074,0.7083333333,0.1219512195,0.0588235294},
{0.1851851852,0.5833333333,0.1463414634,0.0588235294},
{0.1851851852,0.4166666667,0.0975609756,0},
{0,0.4166666667,0.0243902439,0},
{0.5555555556,0.8333333333,0.0487804878,0.0588235294},
{0.5185185185,1,0.1219512195,0.1764705882},
{0.4074074074,0.7916666667,0.0731707317,0.1764705882},
{0.2962962963,0.625,0.0975609756,0.1176470588},
{0.5185185185,0.75,0.1707317073,0.1176470588},
{0.2962962963,0.75,0.1219512195,0.1176470588},
{0.4074074074,0.5833333333,0.1707317073,0.0588235294},
{0.2962962963,0.7083333333,0.1219512195,0.1764705882},
{0.1111111111,0.6666666667,0,0.0588235294},
{0.2962962963,0.5416666667,0.1707317073,0.2352941176},
{0.1851851852,0.5833333333,0.2195121951,0.0588235294},
{0.2592592593,0.4166666667,0.1463414634,0.0588235294},
{0.2592592593,0.5833333333,0.1463414634,0.1764705882},
{0.3333333333,0.625,0.1219512195,0.0588235294},
{0.3333333333,0.5833333333,0.0975609756,0.0588235294},
{0.1481481481,0.5,0.1463414634,0.0588235294},
{0.1851851852,0.4583333333,0.1463414634,0.0588235294},
{0.4074074074,0.5833333333,0.1219512195,0.1764705882},
{0.3333333333,0.875,0.1219512195,0},
{0.4444444444,0.9166666667,0.0975609756,0.0588235294},
{0.2222222222,0.4583333333,0.1219512195,0.0588235294},
{0.2592592593,0.5,0.0487804878,0.0588235294},
{0.4444444444,0.625,0.0731707317,0.0588235294},
{0.2222222222,0.6666666667,0.0975609756,0},
{0.037037037,0.4166666667,0.0731707317,0.0588235294},
{0.2962962963,0.5833333333,0.1219512195,0.0588235294},
{0.2592592593,0.625,0.0731707317,0.1176470588},
{0.0740740741,0.125,0.0731707317,0.1176470588},
{0.037037037,0.5,0.0731707317,0.0588235294},
{0.2592592593,0.625,0.1463414634,0.2941176471},
{0.2962962963,0.75,0.2195121951,0.1764705882},
{0.1851851852,0.4166666667,0.0975609756,0.1176470588},
{0.2962962963,0.75,0.1463414634,0.0588235294},
{0.1111111111,0.5,0.0975609756,0.0588235294},
{0.3703703704,0.7083333333,0.1219512195,0.0588235294},
{0.2592592593,0.5416666667,0.0975609756,0.0588235294},
{1,0.5,0.9024390244,0.7647058824},
{0.7777777778,0.5,0.8536585366,0.8235294118},
{0.962962963,0.4583333333,0.9512195122,0.8235294118},
{0.4444444444,0.125,0.7317073171,0.7058823529},
{0.8148148148,0.3333333333,0.8780487805,0.8235294118},
{0.5185185185,0.3333333333,0.8536585366,0.7058823529},
{0.7407407407,0.5416666667,0.9024390244,0.8823529412},
{0.2222222222,0.1666666667,0.5609756098,0.5294117647},
{0.8518518519,0.375,0.8780487805,0.7058823529},
{0.3333333333,0.2916666667,0.7073170732,0.7647058824},
{0.2592592593,0,0.6097560976,0.5294117647},
{0.5925925926,0.4166666667,0.7804878049,0.8235294118},
{0.6296296296,0.0833333333,0.7317073171,0.5294117647},
{0.6666666667,0.375,0.9024390244,0.7647058824},
{0.4814814815,0.375,0.6341463415,0.7058823529},
{0.8888888889,0.4583333333,0.8292682927,0.7647058824},
{0.4814814815,0.4166666667,0.8536585366,0.8235294118},
{0.5555555556,0.2916666667,0.756097561,0.5294117647},
{0.7037037037,0.0833333333,0.8536585366,0.8235294118},
{0.4814814815,0.2083333333,0.7073170732,0.5882352941},
{0.5925925926,0.5,0.9268292683,1},
{0.6666666667,0.3333333333,0.7317073171,0.7058823529},
{0.7407407407,0.2083333333,0.9512195122,0.8235294118},
{0.6666666667,0.3333333333,0.9024390244,0.6470588235},
{0.7777777778,0.375,0.8048780488,0.7058823529},
{0.8518518519,0.4166666667,0.8292682927,0.7647058824},
{0.9259259259,0.3333333333,0.9268292683,0.7647058824},
{0.8888888889,0.4166666667,0.9756097561,0.9411764706},
{0.6296296296,0.375,0.8536585366,0.8235294118},
{0.5185185185,0.25,0.6097560976,0.5294117647},
{0.4444444444,0.1666666667,0.6829268293,0.5882352941},
{0.4444444444,0.1666666667,0.6585365854,0.5294117647},
{0.5555555556,0.2916666667,0.7073170732,0.6470588235},
{0.6296296296,0.2916666667,1,0.8823529412},
{0.4074074074,0.4166666667,0.8536585366,0.8235294118},
{0.6296296296,0.5833333333,0.8536585366,0.8823529412},
{0.8888888889,0.4583333333,0.9024390244,0.8235294118},
{0.7407407407,0.125,0.8292682927,0.7058823529},
{0.4814814815,0.4166666667,0.756097561,0.7058823529},
{0.4444444444,0.2083333333,0.7317073171,0.7058823529},
{0.4444444444,0.25,0.8292682927,0.6470588235},
{0.6666666667,0.4166666667,0.8780487805,0.7647058824},
{0.5555555556,0.25,0.7317073171,0.6470588235},
{0.2592592593,0.125,0.5609756098,0.5294117647},
{0.4814814815,0.2916666667,0.7804878049,0.7058823529},
{0.5185185185,0.4166666667,0.7804878049,0.6470588235},
{0.5185185185,0.375,0.7804878049,0.7058823529},
{0.7037037037,0.375,0.8048780488,0.7058823529},
{0.2962962963,0.2083333333,0.487804878,0.5882352941},
{0.5185185185,0.3333333333,0.756097561,0.7058823529}
};


mostrar_iniciales(datos,deseado);
run(tam_datos,pesos,Yout,deseado,datos);

mostrar_iniciales(datos,deseado);
mostrar_Y(Yout);
mostrar_pesos(pesos);

}

void zeros(vector<enteros> &v,int tam_datos){
	for (int i = 0; i < tam_datos; ++i)
	{
		v.push_back(0.0);
	}
}
/*
void zeros(vector<double> &v,int tam_datos){
	for (int i = 0; i < tam_datos; ++i)
	{
		v.push_back(0.0);
	}
}*/

void run(int tam_datos, vector<dobles> &pesos,vector<enteros> &Yout,vector<enteros> deseado,vector<vector<enteros>> datos){
	zeros(Yout,tam_datos);
	zeros(pesos,datos[0].size());
	while(error(Yout,deseado)){
		for (int i = 0; i < datos.size(); ++i)
		{
			obtener_Y(pesos,datos[i],Yout[i],deseado[i]);
		}
	}

}

bool error(vector<enteros> Yout,vector<enteros> deseado){
	for (int i = 0; i <Yout.size(); ++i)
	{
		if(Yout[i]!=deseado[i]){
			return true;
		}
	}
	return false;
}

double suma_de_PesosDatos(vector<dobles> pesos,vector<enteros> datos){
	double suma=0;
	for (int i = 0; i < pesos.size(); ++i)
	{
		suma+=pesos[i]*datos[i];
	}
	return suma;
}

void obtener_Y(vector<dobles> &pesos,vector<enteros> datos,enteros &Yout,enteros deseado){
 	Yout=function(suma_de_PesosDatos(pesos,datos));
 		if(Yout!=deseado){
 			cambio_de_pesos(pesos,datos,Yout,deseado);
 		}
}

void cambio_de_pesos(vector<dobles> & pesos,vector<enteros> datos,enteros Yout, enteros deseado){
	for(unsigned i=0;i<pesos.size();++i){
		pesos[i]=pesos[i]+alpha*(deseado-Yout)*datos[i];
	}
}

void mostrar_iniciales(vector<vector<enteros>> v,std::vector<enteros> deseado){
	cout<<"\tX\t"<<endl;
	for (int i = 0; i < v.size(); ++i)
	{	
		for (int j = 0; j < v[i].size(); ++j)
		{
			cout<<v[i][j]<<" ";
		}
		cout<<endl;
	}
	cout<<"\tdeseado\t"<<endl;
	for (int i = 0; i < deseado.size(); ++i)
	{	
		cout<<deseado[i]<<" ";
		
	}
	cout<<endl;

}

void mostrar_Y(vector<enteros> Y){
	cout<<"\tYout\t"<<endl;
	for (int i = 0; i < Y.size(); ++i)
	{	
		cout<<Y[i]<<" ";
	}
	cout<<endl;	
}

void mostrar_pesos(vector<double> pesos){
	cout<<"\tPesos\t"<<endl;
	for (int i = 0; i < pesos.size(); ++i)
	{	
		cout<<pesos[i]<<endl;
	}
	cout<<endl;	
}

int function(double numero){
	double funcion=numero;
	if (funcion>=0.5){
		return 1;
	}else{
		return 0;
	}
}